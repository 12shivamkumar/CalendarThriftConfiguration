/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.example.CalendarThriftConfiguration;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-07-25")
public class MeetingDetails implements org.apache.thrift.TBase<MeetingDetails, MeetingDetails._Fields>, java.io.Serializable, Cloneable, Comparable<MeetingDetails> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MeetingDetails");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AGENDA_FIELD_DESC = new org.apache.thrift.protocol.TField("agenda", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OWNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DATE_OF_MEETING_FIELD_DESC = new org.apache.thrift.protocol.TField("dateOfMeeting", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField IS_AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("isAvailable", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.I32, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MeetingDetailsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MeetingDetailsTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String description; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String agenda; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String ownerId; // required
  public @org.apache.thrift.annotation.Nullable Date dateOfMeeting; // required
  public @org.apache.thrift.annotation.Nullable Time startTime; // required
  public @org.apache.thrift.annotation.Nullable Time endTime; // required
  public boolean isAvailable; // required
  public int roomId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    DESCRIPTION((short)2, "description"),
    AGENDA((short)3, "agenda"),
    OWNER_ID((short)4, "ownerId"),
    DATE_OF_MEETING((short)5, "dateOfMeeting"),
    START_TIME((short)6, "startTime"),
    END_TIME((short)7, "endTime"),
    IS_AVAILABLE((short)8, "isAvailable"),
    ROOM_ID((short)9, "roomId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // DESCRIPTION
          return DESCRIPTION;
        case 3: // AGENDA
          return AGENDA;
        case 4: // OWNER_ID
          return OWNER_ID;
        case 5: // DATE_OF_MEETING
          return DATE_OF_MEETING;
        case 6: // START_TIME
          return START_TIME;
        case 7: // END_TIME
          return END_TIME;
        case 8: // IS_AVAILABLE
          return IS_AVAILABLE;
        case 9: // ROOM_ID
          return ROOM_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISAVAILABLE_ISSET_ID = 0;
  private static final int __ROOMID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AGENDA, new org.apache.thrift.meta_data.FieldMetaData("agenda", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNER_ID, new org.apache.thrift.meta_data.FieldMetaData("ownerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_OF_MEETING, new org.apache.thrift.meta_data.FieldMetaData("dateOfMeeting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Date.class)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Time.class)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Time.class)));
    tmpMap.put(_Fields.IS_AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("isAvailable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MeetingDetails.class, metaDataMap);
  }

  public MeetingDetails() {
  }

  public MeetingDetails(
    java.lang.String id,
    java.lang.String description,
    java.lang.String agenda,
    java.lang.String ownerId,
    Date dateOfMeeting,
    Time startTime,
    Time endTime,
    boolean isAvailable,
    int roomId)
  {
    this();
    this.id = id;
    this.description = description;
    this.agenda = agenda;
    this.ownerId = ownerId;
    this.dateOfMeeting = dateOfMeeting;
    this.startTime = startTime;
    this.endTime = endTime;
    this.isAvailable = isAvailable;
    setIsAvailableIsSet(true);
    this.roomId = roomId;
    setRoomIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MeetingDetails(MeetingDetails other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetAgenda()) {
      this.agenda = other.agenda;
    }
    if (other.isSetOwnerId()) {
      this.ownerId = other.ownerId;
    }
    if (other.isSetDateOfMeeting()) {
      this.dateOfMeeting = new Date(other.dateOfMeeting);
    }
    if (other.isSetStartTime()) {
      this.startTime = new Time(other.startTime);
    }
    if (other.isSetEndTime()) {
      this.endTime = new Time(other.endTime);
    }
    this.isAvailable = other.isAvailable;
    this.roomId = other.roomId;
  }

  public MeetingDetails deepCopy() {
    return new MeetingDetails(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.description = null;
    this.agenda = null;
    this.ownerId = null;
    this.dateOfMeeting = null;
    this.startTime = null;
    this.endTime = null;
    setIsAvailableIsSet(false);
    this.isAvailable = false;
    setRoomIdIsSet(false);
    this.roomId = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getId() {
    return this.id;
  }

  public MeetingDetails setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDescription() {
    return this.description;
  }

  public MeetingDetails setDescription(@org.apache.thrift.annotation.Nullable java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getAgenda() {
    return this.agenda;
  }

  public MeetingDetails setAgenda(@org.apache.thrift.annotation.Nullable java.lang.String agenda) {
    this.agenda = agenda;
    return this;
  }

  public void unsetAgenda() {
    this.agenda = null;
  }

  /** Returns true if field agenda is set (has been assigned a value) and false otherwise */
  public boolean isSetAgenda() {
    return this.agenda != null;
  }

  public void setAgendaIsSet(boolean value) {
    if (!value) {
      this.agenda = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOwnerId() {
    return this.ownerId;
  }

  public MeetingDetails setOwnerId(@org.apache.thrift.annotation.Nullable java.lang.String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  public void unsetOwnerId() {
    this.ownerId = null;
  }

  /** Returns true if field ownerId is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerId() {
    return this.ownerId != null;
  }

  public void setOwnerIdIsSet(boolean value) {
    if (!value) {
      this.ownerId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Date getDateOfMeeting() {
    return this.dateOfMeeting;
  }

  public MeetingDetails setDateOfMeeting(@org.apache.thrift.annotation.Nullable Date dateOfMeeting) {
    this.dateOfMeeting = dateOfMeeting;
    return this;
  }

  public void unsetDateOfMeeting() {
    this.dateOfMeeting = null;
  }

  /** Returns true if field dateOfMeeting is set (has been assigned a value) and false otherwise */
  public boolean isSetDateOfMeeting() {
    return this.dateOfMeeting != null;
  }

  public void setDateOfMeetingIsSet(boolean value) {
    if (!value) {
      this.dateOfMeeting = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Time getStartTime() {
    return this.startTime;
  }

  public MeetingDetails setStartTime(@org.apache.thrift.annotation.Nullable Time startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Time getEndTime() {
    return this.endTime;
  }

  public MeetingDetails setEndTime(@org.apache.thrift.annotation.Nullable Time endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  public boolean isIsAvailable() {
    return this.isAvailable;
  }

  public MeetingDetails setIsAvailable(boolean isAvailable) {
    this.isAvailable = isAvailable;
    setIsAvailableIsSet(true);
    return this;
  }

  public void unsetIsAvailable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISAVAILABLE_ISSET_ID);
  }

  /** Returns true if field isAvailable is set (has been assigned a value) and false otherwise */
  public boolean isSetIsAvailable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISAVAILABLE_ISSET_ID);
  }

  public void setIsAvailableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISAVAILABLE_ISSET_ID, value);
  }

  public int getRoomId() {
    return this.roomId;
  }

  public MeetingDetails setRoomId(int roomId) {
    this.roomId = roomId;
    setRoomIdIsSet(true);
    return this;
  }

  public void unsetRoomId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ROOMID_ISSET_ID);
  }

  /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoomId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ROOMID_ISSET_ID);
  }

  public void setRoomIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ROOMID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case AGENDA:
      if (value == null) {
        unsetAgenda();
      } else {
        setAgenda((java.lang.String)value);
      }
      break;

    case OWNER_ID:
      if (value == null) {
        unsetOwnerId();
      } else {
        setOwnerId((java.lang.String)value);
      }
      break;

    case DATE_OF_MEETING:
      if (value == null) {
        unsetDateOfMeeting();
      } else {
        setDateOfMeeting((Date)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Time)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Time)value);
      }
      break;

    case IS_AVAILABLE:
      if (value == null) {
        unsetIsAvailable();
      } else {
        setIsAvailable((java.lang.Boolean)value);
      }
      break;

    case ROOM_ID:
      if (value == null) {
        unsetRoomId();
      } else {
        setRoomId((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case DESCRIPTION:
      return getDescription();

    case AGENDA:
      return getAgenda();

    case OWNER_ID:
      return getOwnerId();

    case DATE_OF_MEETING:
      return getDateOfMeeting();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case IS_AVAILABLE:
      return isIsAvailable();

    case ROOM_ID:
      return getRoomId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case DESCRIPTION:
      return isSetDescription();
    case AGENDA:
      return isSetAgenda();
    case OWNER_ID:
      return isSetOwnerId();
    case DATE_OF_MEETING:
      return isSetDateOfMeeting();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case IS_AVAILABLE:
      return isSetIsAvailable();
    case ROOM_ID:
      return isSetRoomId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof MeetingDetails)
      return this.equals((MeetingDetails)that);
    return false;
  }

  public boolean equals(MeetingDetails that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_agenda = true && this.isSetAgenda();
    boolean that_present_agenda = true && that.isSetAgenda();
    if (this_present_agenda || that_present_agenda) {
      if (!(this_present_agenda && that_present_agenda))
        return false;
      if (!this.agenda.equals(that.agenda))
        return false;
    }

    boolean this_present_ownerId = true && this.isSetOwnerId();
    boolean that_present_ownerId = true && that.isSetOwnerId();
    if (this_present_ownerId || that_present_ownerId) {
      if (!(this_present_ownerId && that_present_ownerId))
        return false;
      if (!this.ownerId.equals(that.ownerId))
        return false;
    }

    boolean this_present_dateOfMeeting = true && this.isSetDateOfMeeting();
    boolean that_present_dateOfMeeting = true && that.isSetDateOfMeeting();
    if (this_present_dateOfMeeting || that_present_dateOfMeeting) {
      if (!(this_present_dateOfMeeting && that_present_dateOfMeeting))
        return false;
      if (!this.dateOfMeeting.equals(that.dateOfMeeting))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_isAvailable = true;
    boolean that_present_isAvailable = true;
    if (this_present_isAvailable || that_present_isAvailable) {
      if (!(this_present_isAvailable && that_present_isAvailable))
        return false;
      if (this.isAvailable != that.isAvailable)
        return false;
    }

    boolean this_present_roomId = true;
    boolean that_present_roomId = true;
    if (this_present_roomId || that_present_roomId) {
      if (!(this_present_roomId && that_present_roomId))
        return false;
      if (this.roomId != that.roomId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetAgenda()) ? 131071 : 524287);
    if (isSetAgenda())
      hashCode = hashCode * 8191 + agenda.hashCode();

    hashCode = hashCode * 8191 + ((isSetOwnerId()) ? 131071 : 524287);
    if (isSetOwnerId())
      hashCode = hashCode * 8191 + ownerId.hashCode();

    hashCode = hashCode * 8191 + ((isSetDateOfMeeting()) ? 131071 : 524287);
    if (isSetDateOfMeeting())
      hashCode = hashCode * 8191 + dateOfMeeting.hashCode();

    hashCode = hashCode * 8191 + ((isSetStartTime()) ? 131071 : 524287);
    if (isSetStartTime())
      hashCode = hashCode * 8191 + startTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndTime()) ? 131071 : 524287);
    if (isSetEndTime())
      hashCode = hashCode * 8191 + endTime.hashCode();

    hashCode = hashCode * 8191 + ((isAvailable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + roomId;

    return hashCode;
  }

  @Override
  public int compareTo(MeetingDetails other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDescription(), other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAgenda(), other.isSetAgenda());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgenda()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agenda, other.agenda);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOwnerId(), other.isSetOwnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerId, other.ownerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDateOfMeeting(), other.isSetDateOfMeeting());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateOfMeeting()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateOfMeeting, other.dateOfMeeting);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStartTime(), other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEndTime(), other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsAvailable(), other.isSetIsAvailable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsAvailable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isAvailable, other.isAvailable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRoomId(), other.isSetRoomId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoomId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MeetingDetails(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("agenda:");
    if (this.agenda == null) {
      sb.append("null");
    } else {
      sb.append(this.agenda);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownerId:");
    if (this.ownerId == null) {
      sb.append("null");
    } else {
      sb.append(this.ownerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateOfMeeting:");
    if (this.dateOfMeeting == null) {
      sb.append("null");
    } else {
      sb.append(this.dateOfMeeting);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isAvailable:");
    sb.append(this.isAvailable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("roomId:");
    sb.append(this.roomId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (dateOfMeeting != null) {
      dateOfMeeting.validate();
    }
    if (startTime != null) {
      startTime.validate();
    }
    if (endTime != null) {
      endTime.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MeetingDetailsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MeetingDetailsStandardScheme getScheme() {
      return new MeetingDetailsStandardScheme();
    }
  }

  private static class MeetingDetailsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MeetingDetails> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MeetingDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AGENDA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.agenda = iprot.readString();
              struct.setAgendaIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OWNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ownerId = iprot.readString();
              struct.setOwnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATE_OF_MEETING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dateOfMeeting = new Date();
              struct.dateOfMeeting.read(iprot);
              struct.setDateOfMeetingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.startTime = new Time();
              struct.startTime.read(iprot);
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.endTime = new Time();
              struct.endTime.read(iprot);
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_AVAILABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isAvailable = iprot.readBool();
              struct.setIsAvailableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ROOM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.roomId = iprot.readI32();
              struct.setRoomIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MeetingDetails struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.agenda != null) {
        oprot.writeFieldBegin(AGENDA_FIELD_DESC);
        oprot.writeString(struct.agenda);
        oprot.writeFieldEnd();
      }
      if (struct.ownerId != null) {
        oprot.writeFieldBegin(OWNER_ID_FIELD_DESC);
        oprot.writeString(struct.ownerId);
        oprot.writeFieldEnd();
      }
      if (struct.dateOfMeeting != null) {
        oprot.writeFieldBegin(DATE_OF_MEETING_FIELD_DESC);
        struct.dateOfMeeting.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        struct.startTime.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        struct.endTime.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_AVAILABLE_FIELD_DESC);
      oprot.writeBool(struct.isAvailable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
      oprot.writeI32(struct.roomId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MeetingDetailsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MeetingDetailsTupleScheme getScheme() {
      return new MeetingDetailsTupleScheme();
    }
  }

  private static class MeetingDetailsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MeetingDetails> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MeetingDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetDescription()) {
        optionals.set(1);
      }
      if (struct.isSetAgenda()) {
        optionals.set(2);
      }
      if (struct.isSetOwnerId()) {
        optionals.set(3);
      }
      if (struct.isSetDateOfMeeting()) {
        optionals.set(4);
      }
      if (struct.isSetStartTime()) {
        optionals.set(5);
      }
      if (struct.isSetEndTime()) {
        optionals.set(6);
      }
      if (struct.isSetIsAvailable()) {
        optionals.set(7);
      }
      if (struct.isSetRoomId()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetAgenda()) {
        oprot.writeString(struct.agenda);
      }
      if (struct.isSetOwnerId()) {
        oprot.writeString(struct.ownerId);
      }
      if (struct.isSetDateOfMeeting()) {
        struct.dateOfMeeting.write(oprot);
      }
      if (struct.isSetStartTime()) {
        struct.startTime.write(oprot);
      }
      if (struct.isSetEndTime()) {
        struct.endTime.write(oprot);
      }
      if (struct.isSetIsAvailable()) {
        oprot.writeBool(struct.isAvailable);
      }
      if (struct.isSetRoomId()) {
        oprot.writeI32(struct.roomId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MeetingDetails struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.agenda = iprot.readString();
        struct.setAgendaIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ownerId = iprot.readString();
        struct.setOwnerIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.dateOfMeeting = new Date();
        struct.dateOfMeeting.read(iprot);
        struct.setDateOfMeetingIsSet(true);
      }
      if (incoming.get(5)) {
        struct.startTime = new Time();
        struct.startTime.read(iprot);
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.endTime = new Time();
        struct.endTime.read(iprot);
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isAvailable = iprot.readBool();
        struct.setIsAvailableIsSet(true);
      }
      if (incoming.get(8)) {
        struct.roomId = iprot.readI32();
        struct.setRoomIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

