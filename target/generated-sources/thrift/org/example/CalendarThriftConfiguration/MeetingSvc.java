/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.example.CalendarThriftConfiguration;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-07-25")
public class MeetingSvc {

  public interface Iface {

    public boolean cancelMeetingOfRemovedEmployee(java.lang.String employeeId) throws org.apache.thrift.TException;

    public boolean updateStatusOfRemovedEmployee(java.lang.String employeeId) throws org.apache.thrift.TException;

    public java.util.List<java.lang.String> checkEmployeeAvailability(EmployeeAvailabilityDataRequest employeeDetails) throws org.apache.thrift.TException;

    public boolean addMeetingDetails(MeetingDetails meetingDetails) throws org.apache.thrift.TException;

    public boolean addEmployeeMeetingStatus(java.util.List<EmployeeStatusDataRequest> employeeMeetingStatus) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void cancelMeetingOfRemovedEmployee(java.lang.String employeeId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void updateStatusOfRemovedEmployee(java.lang.String employeeId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void checkEmployeeAvailability(EmployeeAvailabilityDataRequest employeeDetails, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void addMeetingDetails(MeetingDetails meetingDetails, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void addEmployeeMeetingStatus(java.util.List<EmployeeStatusDataRequest> employeeMeetingStatus, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean cancelMeetingOfRemovedEmployee(java.lang.String employeeId) throws org.apache.thrift.TException
    {
      send_cancelMeetingOfRemovedEmployee(employeeId);
      return recv_cancelMeetingOfRemovedEmployee();
    }

    public void send_cancelMeetingOfRemovedEmployee(java.lang.String employeeId) throws org.apache.thrift.TException
    {
      cancelMeetingOfRemovedEmployee_args args = new cancelMeetingOfRemovedEmployee_args();
      args.setEmployeeId(employeeId);
      sendBase("cancelMeetingOfRemovedEmployee", args);
    }

    public boolean recv_cancelMeetingOfRemovedEmployee() throws org.apache.thrift.TException
    {
      cancelMeetingOfRemovedEmployee_result result = new cancelMeetingOfRemovedEmployee_result();
      receiveBase(result, "cancelMeetingOfRemovedEmployee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelMeetingOfRemovedEmployee failed: unknown result");
    }

    public boolean updateStatusOfRemovedEmployee(java.lang.String employeeId) throws org.apache.thrift.TException
    {
      send_updateStatusOfRemovedEmployee(employeeId);
      return recv_updateStatusOfRemovedEmployee();
    }

    public void send_updateStatusOfRemovedEmployee(java.lang.String employeeId) throws org.apache.thrift.TException
    {
      updateStatusOfRemovedEmployee_args args = new updateStatusOfRemovedEmployee_args();
      args.setEmployeeId(employeeId);
      sendBase("updateStatusOfRemovedEmployee", args);
    }

    public boolean recv_updateStatusOfRemovedEmployee() throws org.apache.thrift.TException
    {
      updateStatusOfRemovedEmployee_result result = new updateStatusOfRemovedEmployee_result();
      receiveBase(result, "updateStatusOfRemovedEmployee");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateStatusOfRemovedEmployee failed: unknown result");
    }

    public java.util.List<java.lang.String> checkEmployeeAvailability(EmployeeAvailabilityDataRequest employeeDetails) throws org.apache.thrift.TException
    {
      send_checkEmployeeAvailability(employeeDetails);
      return recv_checkEmployeeAvailability();
    }

    public void send_checkEmployeeAvailability(EmployeeAvailabilityDataRequest employeeDetails) throws org.apache.thrift.TException
    {
      checkEmployeeAvailability_args args = new checkEmployeeAvailability_args();
      args.setEmployeeDetails(employeeDetails);
      sendBase("checkEmployeeAvailability", args);
    }

    public java.util.List<java.lang.String> recv_checkEmployeeAvailability() throws org.apache.thrift.TException
    {
      checkEmployeeAvailability_result result = new checkEmployeeAvailability_result();
      receiveBase(result, "checkEmployeeAvailability");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkEmployeeAvailability failed: unknown result");
    }

    public boolean addMeetingDetails(MeetingDetails meetingDetails) throws org.apache.thrift.TException
    {
      send_addMeetingDetails(meetingDetails);
      return recv_addMeetingDetails();
    }

    public void send_addMeetingDetails(MeetingDetails meetingDetails) throws org.apache.thrift.TException
    {
      addMeetingDetails_args args = new addMeetingDetails_args();
      args.setMeetingDetails(meetingDetails);
      sendBase("addMeetingDetails", args);
    }

    public boolean recv_addMeetingDetails() throws org.apache.thrift.TException
    {
      addMeetingDetails_result result = new addMeetingDetails_result();
      receiveBase(result, "addMeetingDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addMeetingDetails failed: unknown result");
    }

    public boolean addEmployeeMeetingStatus(java.util.List<EmployeeStatusDataRequest> employeeMeetingStatus) throws org.apache.thrift.TException
    {
      send_addEmployeeMeetingStatus(employeeMeetingStatus);
      return recv_addEmployeeMeetingStatus();
    }

    public void send_addEmployeeMeetingStatus(java.util.List<EmployeeStatusDataRequest> employeeMeetingStatus) throws org.apache.thrift.TException
    {
      addEmployeeMeetingStatus_args args = new addEmployeeMeetingStatus_args();
      args.setEmployeeMeetingStatus(employeeMeetingStatus);
      sendBase("addEmployeeMeetingStatus", args);
    }

    public boolean recv_addEmployeeMeetingStatus() throws org.apache.thrift.TException
    {
      addEmployeeMeetingStatus_result result = new addEmployeeMeetingStatus_result();
      receiveBase(result, "addEmployeeMeetingStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addEmployeeMeetingStatus failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void cancelMeetingOfRemovedEmployee(java.lang.String employeeId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelMeetingOfRemovedEmployee_call method_call = new cancelMeetingOfRemovedEmployee_call(employeeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelMeetingOfRemovedEmployee_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String employeeId;
      public cancelMeetingOfRemovedEmployee_call(java.lang.String employeeId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeId = employeeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelMeetingOfRemovedEmployee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelMeetingOfRemovedEmployee_args args = new cancelMeetingOfRemovedEmployee_args();
        args.setEmployeeId(employeeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelMeetingOfRemovedEmployee();
      }
    }

    public void updateStatusOfRemovedEmployee(java.lang.String employeeId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateStatusOfRemovedEmployee_call method_call = new updateStatusOfRemovedEmployee_call(employeeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateStatusOfRemovedEmployee_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String employeeId;
      public updateStatusOfRemovedEmployee_call(java.lang.String employeeId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeId = employeeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateStatusOfRemovedEmployee", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateStatusOfRemovedEmployee_args args = new updateStatusOfRemovedEmployee_args();
        args.setEmployeeId(employeeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateStatusOfRemovedEmployee();
      }
    }

    public void checkEmployeeAvailability(EmployeeAvailabilityDataRequest employeeDetails, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkEmployeeAvailability_call method_call = new checkEmployeeAvailability_call(employeeDetails, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkEmployeeAvailability_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private EmployeeAvailabilityDataRequest employeeDetails;
      public checkEmployeeAvailability_call(EmployeeAvailabilityDataRequest employeeDetails, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeDetails = employeeDetails;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkEmployeeAvailability", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkEmployeeAvailability_args args = new checkEmployeeAvailability_args();
        args.setEmployeeDetails(employeeDetails);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkEmployeeAvailability();
      }
    }

    public void addMeetingDetails(MeetingDetails meetingDetails, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addMeetingDetails_call method_call = new addMeetingDetails_call(meetingDetails, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addMeetingDetails_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private MeetingDetails meetingDetails;
      public addMeetingDetails_call(MeetingDetails meetingDetails, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.meetingDetails = meetingDetails;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addMeetingDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addMeetingDetails_args args = new addMeetingDetails_args();
        args.setMeetingDetails(meetingDetails);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addMeetingDetails();
      }
    }

    public void addEmployeeMeetingStatus(java.util.List<EmployeeStatusDataRequest> employeeMeetingStatus, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addEmployeeMeetingStatus_call method_call = new addEmployeeMeetingStatus_call(employeeMeetingStatus, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addEmployeeMeetingStatus_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.util.List<EmployeeStatusDataRequest> employeeMeetingStatus;
      public addEmployeeMeetingStatus_call(java.util.List<EmployeeStatusDataRequest> employeeMeetingStatus, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.employeeMeetingStatus = employeeMeetingStatus;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addEmployeeMeetingStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addEmployeeMeetingStatus_args args = new addEmployeeMeetingStatus_args();
        args.setEmployeeMeetingStatus(employeeMeetingStatus);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addEmployeeMeetingStatus();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("cancelMeetingOfRemovedEmployee", new cancelMeetingOfRemovedEmployee());
      processMap.put("updateStatusOfRemovedEmployee", new updateStatusOfRemovedEmployee());
      processMap.put("checkEmployeeAvailability", new checkEmployeeAvailability());
      processMap.put("addMeetingDetails", new addMeetingDetails());
      processMap.put("addEmployeeMeetingStatus", new addEmployeeMeetingStatus());
      return processMap;
    }

    public static class cancelMeetingOfRemovedEmployee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelMeetingOfRemovedEmployee_args> {
      public cancelMeetingOfRemovedEmployee() {
        super("cancelMeetingOfRemovedEmployee");
      }

      public cancelMeetingOfRemovedEmployee_args getEmptyArgsInstance() {
        return new cancelMeetingOfRemovedEmployee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public cancelMeetingOfRemovedEmployee_result getResult(I iface, cancelMeetingOfRemovedEmployee_args args) throws org.apache.thrift.TException {
        cancelMeetingOfRemovedEmployee_result result = new cancelMeetingOfRemovedEmployee_result();
        result.success = iface.cancelMeetingOfRemovedEmployee(args.employeeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateStatusOfRemovedEmployee<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateStatusOfRemovedEmployee_args> {
      public updateStatusOfRemovedEmployee() {
        super("updateStatusOfRemovedEmployee");
      }

      public updateStatusOfRemovedEmployee_args getEmptyArgsInstance() {
        return new updateStatusOfRemovedEmployee_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public updateStatusOfRemovedEmployee_result getResult(I iface, updateStatusOfRemovedEmployee_args args) throws org.apache.thrift.TException {
        updateStatusOfRemovedEmployee_result result = new updateStatusOfRemovedEmployee_result();
        result.success = iface.updateStatusOfRemovedEmployee(args.employeeId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class checkEmployeeAvailability<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkEmployeeAvailability_args> {
      public checkEmployeeAvailability() {
        super("checkEmployeeAvailability");
      }

      public checkEmployeeAvailability_args getEmptyArgsInstance() {
        return new checkEmployeeAvailability_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public checkEmployeeAvailability_result getResult(I iface, checkEmployeeAvailability_args args) throws org.apache.thrift.TException {
        checkEmployeeAvailability_result result = new checkEmployeeAvailability_result();
        result.success = iface.checkEmployeeAvailability(args.employeeDetails);
        return result;
      }
    }

    public static class addMeetingDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addMeetingDetails_args> {
      public addMeetingDetails() {
        super("addMeetingDetails");
      }

      public addMeetingDetails_args getEmptyArgsInstance() {
        return new addMeetingDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public addMeetingDetails_result getResult(I iface, addMeetingDetails_args args) throws org.apache.thrift.TException {
        addMeetingDetails_result result = new addMeetingDetails_result();
        result.success = iface.addMeetingDetails(args.meetingDetails);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addEmployeeMeetingStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addEmployeeMeetingStatus_args> {
      public addEmployeeMeetingStatus() {
        super("addEmployeeMeetingStatus");
      }

      public addEmployeeMeetingStatus_args getEmptyArgsInstance() {
        return new addEmployeeMeetingStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public addEmployeeMeetingStatus_result getResult(I iface, addEmployeeMeetingStatus_args args) throws org.apache.thrift.TException {
        addEmployeeMeetingStatus_result result = new addEmployeeMeetingStatus_result();
        result.success = iface.addEmployeeMeetingStatus(args.employeeMeetingStatus);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("cancelMeetingOfRemovedEmployee", new cancelMeetingOfRemovedEmployee());
      processMap.put("updateStatusOfRemovedEmployee", new updateStatusOfRemovedEmployee());
      processMap.put("checkEmployeeAvailability", new checkEmployeeAvailability());
      processMap.put("addMeetingDetails", new addMeetingDetails());
      processMap.put("addEmployeeMeetingStatus", new addEmployeeMeetingStatus());
      return processMap;
    }

    public static class cancelMeetingOfRemovedEmployee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelMeetingOfRemovedEmployee_args, java.lang.Boolean> {
      public cancelMeetingOfRemovedEmployee() {
        super("cancelMeetingOfRemovedEmployee");
      }

      public cancelMeetingOfRemovedEmployee_args getEmptyArgsInstance() {
        return new cancelMeetingOfRemovedEmployee_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            cancelMeetingOfRemovedEmployee_result result = new cancelMeetingOfRemovedEmployee_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            cancelMeetingOfRemovedEmployee_result result = new cancelMeetingOfRemovedEmployee_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelMeetingOfRemovedEmployee_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.cancelMeetingOfRemovedEmployee(args.employeeId,resultHandler);
      }
    }

    public static class updateStatusOfRemovedEmployee<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateStatusOfRemovedEmployee_args, java.lang.Boolean> {
      public updateStatusOfRemovedEmployee() {
        super("updateStatusOfRemovedEmployee");
      }

      public updateStatusOfRemovedEmployee_args getEmptyArgsInstance() {
        return new updateStatusOfRemovedEmployee_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            updateStatusOfRemovedEmployee_result result = new updateStatusOfRemovedEmployee_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateStatusOfRemovedEmployee_result result = new updateStatusOfRemovedEmployee_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateStatusOfRemovedEmployee_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.updateStatusOfRemovedEmployee(args.employeeId,resultHandler);
      }
    }

    public static class checkEmployeeAvailability<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkEmployeeAvailability_args, java.util.List<java.lang.String>> {
      public checkEmployeeAvailability() {
        super("checkEmployeeAvailability");
      }

      public checkEmployeeAvailability_args getEmptyArgsInstance() {
        return new checkEmployeeAvailability_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            checkEmployeeAvailability_result result = new checkEmployeeAvailability_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkEmployeeAvailability_result result = new checkEmployeeAvailability_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkEmployeeAvailability_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.checkEmployeeAvailability(args.employeeDetails,resultHandler);
      }
    }

    public static class addMeetingDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addMeetingDetails_args, java.lang.Boolean> {
      public addMeetingDetails() {
        super("addMeetingDetails");
      }

      public addMeetingDetails_args getEmptyArgsInstance() {
        return new addMeetingDetails_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            addMeetingDetails_result result = new addMeetingDetails_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addMeetingDetails_result result = new addMeetingDetails_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addMeetingDetails_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.addMeetingDetails(args.meetingDetails,resultHandler);
      }
    }

    public static class addEmployeeMeetingStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addEmployeeMeetingStatus_args, java.lang.Boolean> {
      public addEmployeeMeetingStatus() {
        super("addEmployeeMeetingStatus");
      }

      public addEmployeeMeetingStatus_args getEmptyArgsInstance() {
        return new addEmployeeMeetingStatus_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            addEmployeeMeetingStatus_result result = new addEmployeeMeetingStatus_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addEmployeeMeetingStatus_result result = new addEmployeeMeetingStatus_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addEmployeeMeetingStatus_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.addEmployeeMeetingStatus(args.employeeMeetingStatus,resultHandler);
      }
    }

  }

  public static class cancelMeetingOfRemovedEmployee_args implements org.apache.thrift.TBase<cancelMeetingOfRemovedEmployee_args, cancelMeetingOfRemovedEmployee_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelMeetingOfRemovedEmployee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelMeetingOfRemovedEmployee_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancelMeetingOfRemovedEmployee_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancelMeetingOfRemovedEmployee_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String employeeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_ID((short)1, "employeeId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_ID
            return EMPLOYEE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelMeetingOfRemovedEmployee_args.class, metaDataMap);
    }

    public cancelMeetingOfRemovedEmployee_args() {
    }

    public cancelMeetingOfRemovedEmployee_args(
      java.lang.String employeeId)
    {
      this();
      this.employeeId = employeeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelMeetingOfRemovedEmployee_args(cancelMeetingOfRemovedEmployee_args other) {
      if (other.isSetEmployeeId()) {
        this.employeeId = other.employeeId;
      }
    }

    public cancelMeetingOfRemovedEmployee_args deepCopy() {
      return new cancelMeetingOfRemovedEmployee_args(this);
    }

    @Override
    public void clear() {
      this.employeeId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getEmployeeId() {
      return this.employeeId;
    }

    public cancelMeetingOfRemovedEmployee_args setEmployeeId(@org.apache.thrift.annotation.Nullable java.lang.String employeeId) {
      this.employeeId = employeeId;
      return this;
    }

    public void unsetEmployeeId() {
      this.employeeId = null;
    }

    /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeId() {
      return this.employeeId != null;
    }

    public void setEmployeeIdIsSet(boolean value) {
      if (!value) {
        this.employeeId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_ID:
        if (value == null) {
          unsetEmployeeId();
        } else {
          setEmployeeId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_ID:
        return getEmployeeId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_ID:
        return isSetEmployeeId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof cancelMeetingOfRemovedEmployee_args)
        return this.equals((cancelMeetingOfRemovedEmployee_args)that);
      return false;
    }

    public boolean equals(cancelMeetingOfRemovedEmployee_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeId = true && this.isSetEmployeeId();
      boolean that_present_employeeId = true && that.isSetEmployeeId();
      if (this_present_employeeId || that_present_employeeId) {
        if (!(this_present_employeeId && that_present_employeeId))
          return false;
        if (!this.employeeId.equals(that.employeeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEmployeeId()) ? 131071 : 524287);
      if (isSetEmployeeId())
        hashCode = hashCode * 8191 + employeeId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(cancelMeetingOfRemovedEmployee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetEmployeeId(), other.isSetEmployeeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cancelMeetingOfRemovedEmployee_args(");
      boolean first = true;

      sb.append("employeeId:");
      if (this.employeeId == null) {
        sb.append("null");
      } else {
        sb.append(this.employeeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelMeetingOfRemovedEmployee_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cancelMeetingOfRemovedEmployee_argsStandardScheme getScheme() {
        return new cancelMeetingOfRemovedEmployee_argsStandardScheme();
      }
    }

    private static class cancelMeetingOfRemovedEmployee_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<cancelMeetingOfRemovedEmployee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelMeetingOfRemovedEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.employeeId = iprot.readString();
                struct.setEmployeeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelMeetingOfRemovedEmployee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.employeeId != null) {
          oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
          oprot.writeString(struct.employeeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelMeetingOfRemovedEmployee_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cancelMeetingOfRemovedEmployee_argsTupleScheme getScheme() {
        return new cancelMeetingOfRemovedEmployee_argsTupleScheme();
      }
    }

    private static class cancelMeetingOfRemovedEmployee_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<cancelMeetingOfRemovedEmployee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelMeetingOfRemovedEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmployeeId()) {
          oprot.writeString(struct.employeeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelMeetingOfRemovedEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.employeeId = iprot.readString();
          struct.setEmployeeIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class cancelMeetingOfRemovedEmployee_result implements org.apache.thrift.TBase<cancelMeetingOfRemovedEmployee_result, cancelMeetingOfRemovedEmployee_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelMeetingOfRemovedEmployee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelMeetingOfRemovedEmployee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancelMeetingOfRemovedEmployee_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancelMeetingOfRemovedEmployee_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelMeetingOfRemovedEmployee_result.class, metaDataMap);
    }

    public cancelMeetingOfRemovedEmployee_result() {
    }

    public cancelMeetingOfRemovedEmployee_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelMeetingOfRemovedEmployee_result(cancelMeetingOfRemovedEmployee_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public cancelMeetingOfRemovedEmployee_result deepCopy() {
      return new cancelMeetingOfRemovedEmployee_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public cancelMeetingOfRemovedEmployee_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof cancelMeetingOfRemovedEmployee_result)
        return this.equals((cancelMeetingOfRemovedEmployee_result)that);
      return false;
    }

    public boolean equals(cancelMeetingOfRemovedEmployee_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(cancelMeetingOfRemovedEmployee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cancelMeetingOfRemovedEmployee_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelMeetingOfRemovedEmployee_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cancelMeetingOfRemovedEmployee_resultStandardScheme getScheme() {
        return new cancelMeetingOfRemovedEmployee_resultStandardScheme();
      }
    }

    private static class cancelMeetingOfRemovedEmployee_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<cancelMeetingOfRemovedEmployee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelMeetingOfRemovedEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelMeetingOfRemovedEmployee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelMeetingOfRemovedEmployee_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cancelMeetingOfRemovedEmployee_resultTupleScheme getScheme() {
        return new cancelMeetingOfRemovedEmployee_resultTupleScheme();
      }
    }

    private static class cancelMeetingOfRemovedEmployee_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<cancelMeetingOfRemovedEmployee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelMeetingOfRemovedEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelMeetingOfRemovedEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateStatusOfRemovedEmployee_args implements org.apache.thrift.TBase<updateStatusOfRemovedEmployee_args, updateStatusOfRemovedEmployee_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateStatusOfRemovedEmployee_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatusOfRemovedEmployee_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateStatusOfRemovedEmployee_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateStatusOfRemovedEmployee_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String employeeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_ID((short)1, "employeeId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_ID
            return EMPLOYEE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatusOfRemovedEmployee_args.class, metaDataMap);
    }

    public updateStatusOfRemovedEmployee_args() {
    }

    public updateStatusOfRemovedEmployee_args(
      java.lang.String employeeId)
    {
      this();
      this.employeeId = employeeId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStatusOfRemovedEmployee_args(updateStatusOfRemovedEmployee_args other) {
      if (other.isSetEmployeeId()) {
        this.employeeId = other.employeeId;
      }
    }

    public updateStatusOfRemovedEmployee_args deepCopy() {
      return new updateStatusOfRemovedEmployee_args(this);
    }

    @Override
    public void clear() {
      this.employeeId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getEmployeeId() {
      return this.employeeId;
    }

    public updateStatusOfRemovedEmployee_args setEmployeeId(@org.apache.thrift.annotation.Nullable java.lang.String employeeId) {
      this.employeeId = employeeId;
      return this;
    }

    public void unsetEmployeeId() {
      this.employeeId = null;
    }

    /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeId() {
      return this.employeeId != null;
    }

    public void setEmployeeIdIsSet(boolean value) {
      if (!value) {
        this.employeeId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_ID:
        if (value == null) {
          unsetEmployeeId();
        } else {
          setEmployeeId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_ID:
        return getEmployeeId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_ID:
        return isSetEmployeeId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof updateStatusOfRemovedEmployee_args)
        return this.equals((updateStatusOfRemovedEmployee_args)that);
      return false;
    }

    public boolean equals(updateStatusOfRemovedEmployee_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeId = true && this.isSetEmployeeId();
      boolean that_present_employeeId = true && that.isSetEmployeeId();
      if (this_present_employeeId || that_present_employeeId) {
        if (!(this_present_employeeId && that_present_employeeId))
          return false;
        if (!this.employeeId.equals(that.employeeId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEmployeeId()) ? 131071 : 524287);
      if (isSetEmployeeId())
        hashCode = hashCode * 8191 + employeeId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateStatusOfRemovedEmployee_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetEmployeeId(), other.isSetEmployeeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateStatusOfRemovedEmployee_args(");
      boolean first = true;

      sb.append("employeeId:");
      if (this.employeeId == null) {
        sb.append("null");
      } else {
        sb.append(this.employeeId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStatusOfRemovedEmployee_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateStatusOfRemovedEmployee_argsStandardScheme getScheme() {
        return new updateStatusOfRemovedEmployee_argsStandardScheme();
      }
    }

    private static class updateStatusOfRemovedEmployee_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateStatusOfRemovedEmployee_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatusOfRemovedEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.employeeId = iprot.readString();
                struct.setEmployeeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatusOfRemovedEmployee_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.employeeId != null) {
          oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
          oprot.writeString(struct.employeeId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStatusOfRemovedEmployee_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateStatusOfRemovedEmployee_argsTupleScheme getScheme() {
        return new updateStatusOfRemovedEmployee_argsTupleScheme();
      }
    }

    private static class updateStatusOfRemovedEmployee_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateStatusOfRemovedEmployee_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStatusOfRemovedEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmployeeId()) {
          oprot.writeString(struct.employeeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStatusOfRemovedEmployee_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.employeeId = iprot.readString();
          struct.setEmployeeIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateStatusOfRemovedEmployee_result implements org.apache.thrift.TBase<updateStatusOfRemovedEmployee_result, updateStatusOfRemovedEmployee_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateStatusOfRemovedEmployee_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateStatusOfRemovedEmployee_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateStatusOfRemovedEmployee_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateStatusOfRemovedEmployee_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateStatusOfRemovedEmployee_result.class, metaDataMap);
    }

    public updateStatusOfRemovedEmployee_result() {
    }

    public updateStatusOfRemovedEmployee_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateStatusOfRemovedEmployee_result(updateStatusOfRemovedEmployee_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateStatusOfRemovedEmployee_result deepCopy() {
      return new updateStatusOfRemovedEmployee_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateStatusOfRemovedEmployee_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof updateStatusOfRemovedEmployee_result)
        return this.equals((updateStatusOfRemovedEmployee_result)that);
      return false;
    }

    public boolean equals(updateStatusOfRemovedEmployee_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(updateStatusOfRemovedEmployee_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateStatusOfRemovedEmployee_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateStatusOfRemovedEmployee_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateStatusOfRemovedEmployee_resultStandardScheme getScheme() {
        return new updateStatusOfRemovedEmployee_resultStandardScheme();
      }
    }

    private static class updateStatusOfRemovedEmployee_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateStatusOfRemovedEmployee_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateStatusOfRemovedEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateStatusOfRemovedEmployee_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateStatusOfRemovedEmployee_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateStatusOfRemovedEmployee_resultTupleScheme getScheme() {
        return new updateStatusOfRemovedEmployee_resultTupleScheme();
      }
    }

    private static class updateStatusOfRemovedEmployee_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateStatusOfRemovedEmployee_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateStatusOfRemovedEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateStatusOfRemovedEmployee_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkEmployeeAvailability_args implements org.apache.thrift.TBase<checkEmployeeAvailability_args, checkEmployeeAvailability_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkEmployeeAvailability_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkEmployeeAvailability_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeDetails", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkEmployeeAvailability_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkEmployeeAvailability_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable EmployeeAvailabilityDataRequest employeeDetails; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_DETAILS((short)1, "employeeDetails");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_DETAILS
            return EMPLOYEE_DETAILS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("employeeDetails", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmployeeAvailabilityDataRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkEmployeeAvailability_args.class, metaDataMap);
    }

    public checkEmployeeAvailability_args() {
    }

    public checkEmployeeAvailability_args(
      EmployeeAvailabilityDataRequest employeeDetails)
    {
      this();
      this.employeeDetails = employeeDetails;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkEmployeeAvailability_args(checkEmployeeAvailability_args other) {
      if (other.isSetEmployeeDetails()) {
        this.employeeDetails = new EmployeeAvailabilityDataRequest(other.employeeDetails);
      }
    }

    public checkEmployeeAvailability_args deepCopy() {
      return new checkEmployeeAvailability_args(this);
    }

    @Override
    public void clear() {
      this.employeeDetails = null;
    }

    @org.apache.thrift.annotation.Nullable
    public EmployeeAvailabilityDataRequest getEmployeeDetails() {
      return this.employeeDetails;
    }

    public checkEmployeeAvailability_args setEmployeeDetails(@org.apache.thrift.annotation.Nullable EmployeeAvailabilityDataRequest employeeDetails) {
      this.employeeDetails = employeeDetails;
      return this;
    }

    public void unsetEmployeeDetails() {
      this.employeeDetails = null;
    }

    /** Returns true if field employeeDetails is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeDetails() {
      return this.employeeDetails != null;
    }

    public void setEmployeeDetailsIsSet(boolean value) {
      if (!value) {
        this.employeeDetails = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_DETAILS:
        if (value == null) {
          unsetEmployeeDetails();
        } else {
          setEmployeeDetails((EmployeeAvailabilityDataRequest)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_DETAILS:
        return getEmployeeDetails();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_DETAILS:
        return isSetEmployeeDetails();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof checkEmployeeAvailability_args)
        return this.equals((checkEmployeeAvailability_args)that);
      return false;
    }

    public boolean equals(checkEmployeeAvailability_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeDetails = true && this.isSetEmployeeDetails();
      boolean that_present_employeeDetails = true && that.isSetEmployeeDetails();
      if (this_present_employeeDetails || that_present_employeeDetails) {
        if (!(this_present_employeeDetails && that_present_employeeDetails))
          return false;
        if (!this.employeeDetails.equals(that.employeeDetails))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEmployeeDetails()) ? 131071 : 524287);
      if (isSetEmployeeDetails())
        hashCode = hashCode * 8191 + employeeDetails.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkEmployeeAvailability_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetEmployeeDetails(), other.isSetEmployeeDetails());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeDetails()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeDetails, other.employeeDetails);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkEmployeeAvailability_args(");
      boolean first = true;

      sb.append("employeeDetails:");
      if (this.employeeDetails == null) {
        sb.append("null");
      } else {
        sb.append(this.employeeDetails);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (employeeDetails != null) {
        employeeDetails.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkEmployeeAvailability_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkEmployeeAvailability_argsStandardScheme getScheme() {
        return new checkEmployeeAvailability_argsStandardScheme();
      }
    }

    private static class checkEmployeeAvailability_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkEmployeeAvailability_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkEmployeeAvailability_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_DETAILS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.employeeDetails = new EmployeeAvailabilityDataRequest();
                struct.employeeDetails.read(iprot);
                struct.setEmployeeDetailsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkEmployeeAvailability_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.employeeDetails != null) {
          oprot.writeFieldBegin(EMPLOYEE_DETAILS_FIELD_DESC);
          struct.employeeDetails.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkEmployeeAvailability_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkEmployeeAvailability_argsTupleScheme getScheme() {
        return new checkEmployeeAvailability_argsTupleScheme();
      }
    }

    private static class checkEmployeeAvailability_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkEmployeeAvailability_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkEmployeeAvailability_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeDetails()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmployeeDetails()) {
          struct.employeeDetails.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkEmployeeAvailability_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.employeeDetails = new EmployeeAvailabilityDataRequest();
          struct.employeeDetails.read(iprot);
          struct.setEmployeeDetailsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkEmployeeAvailability_result implements org.apache.thrift.TBase<checkEmployeeAvailability_result, checkEmployeeAvailability_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkEmployeeAvailability_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkEmployeeAvailability_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkEmployeeAvailability_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkEmployeeAvailability_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkEmployeeAvailability_result.class, metaDataMap);
    }

    public checkEmployeeAvailability_result() {
    }

    public checkEmployeeAvailability_result(
      java.util.List<java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkEmployeeAvailability_result(checkEmployeeAvailability_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public checkEmployeeAvailability_result deepCopy() {
      return new checkEmployeeAvailability_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public checkEmployeeAvailability_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof checkEmployeeAvailability_result)
        return this.equals((checkEmployeeAvailability_result)that);
      return false;
    }

    public boolean equals(checkEmployeeAvailability_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkEmployeeAvailability_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkEmployeeAvailability_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkEmployeeAvailability_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkEmployeeAvailability_resultStandardScheme getScheme() {
        return new checkEmployeeAvailability_resultStandardScheme();
      }
    }

    private static class checkEmployeeAvailability_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkEmployeeAvailability_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkEmployeeAvailability_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list8.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkEmployeeAvailability_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter11 : struct.success)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkEmployeeAvailability_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkEmployeeAvailability_resultTupleScheme getScheme() {
        return new checkEmployeeAvailability_resultTupleScheme();
      }
    }

    private static class checkEmployeeAvailability_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkEmployeeAvailability_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkEmployeeAvailability_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter12 : struct.success)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkEmployeeAvailability_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.success = new java.util.ArrayList<java.lang.String>(_list13.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addMeetingDetails_args implements org.apache.thrift.TBase<addMeetingDetails_args, addMeetingDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<addMeetingDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMeetingDetails_args");

    private static final org.apache.thrift.protocol.TField MEETING_DETAILS_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingDetails", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addMeetingDetails_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addMeetingDetails_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable MeetingDetails meetingDetails; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MEETING_DETAILS((short)1, "meetingDetails");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MEETING_DETAILS
            return MEETING_DETAILS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MEETING_DETAILS, new org.apache.thrift.meta_data.FieldMetaData("meetingDetails", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MeetingDetails.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMeetingDetails_args.class, metaDataMap);
    }

    public addMeetingDetails_args() {
    }

    public addMeetingDetails_args(
      MeetingDetails meetingDetails)
    {
      this();
      this.meetingDetails = meetingDetails;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMeetingDetails_args(addMeetingDetails_args other) {
      if (other.isSetMeetingDetails()) {
        this.meetingDetails = new MeetingDetails(other.meetingDetails);
      }
    }

    public addMeetingDetails_args deepCopy() {
      return new addMeetingDetails_args(this);
    }

    @Override
    public void clear() {
      this.meetingDetails = null;
    }

    @org.apache.thrift.annotation.Nullable
    public MeetingDetails getMeetingDetails() {
      return this.meetingDetails;
    }

    public addMeetingDetails_args setMeetingDetails(@org.apache.thrift.annotation.Nullable MeetingDetails meetingDetails) {
      this.meetingDetails = meetingDetails;
      return this;
    }

    public void unsetMeetingDetails() {
      this.meetingDetails = null;
    }

    /** Returns true if field meetingDetails is set (has been assigned a value) and false otherwise */
    public boolean isSetMeetingDetails() {
      return this.meetingDetails != null;
    }

    public void setMeetingDetailsIsSet(boolean value) {
      if (!value) {
        this.meetingDetails = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MEETING_DETAILS:
        if (value == null) {
          unsetMeetingDetails();
        } else {
          setMeetingDetails((MeetingDetails)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MEETING_DETAILS:
        return getMeetingDetails();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MEETING_DETAILS:
        return isSetMeetingDetails();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof addMeetingDetails_args)
        return this.equals((addMeetingDetails_args)that);
      return false;
    }

    public boolean equals(addMeetingDetails_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_meetingDetails = true && this.isSetMeetingDetails();
      boolean that_present_meetingDetails = true && that.isSetMeetingDetails();
      if (this_present_meetingDetails || that_present_meetingDetails) {
        if (!(this_present_meetingDetails && that_present_meetingDetails))
          return false;
        if (!this.meetingDetails.equals(that.meetingDetails))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMeetingDetails()) ? 131071 : 524287);
      if (isSetMeetingDetails())
        hashCode = hashCode * 8191 + meetingDetails.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addMeetingDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMeetingDetails(), other.isSetMeetingDetails());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMeetingDetails()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingDetails, other.meetingDetails);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addMeetingDetails_args(");
      boolean first = true;

      sb.append("meetingDetails:");
      if (this.meetingDetails == null) {
        sb.append("null");
      } else {
        sb.append(this.meetingDetails);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (meetingDetails != null) {
        meetingDetails.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMeetingDetails_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addMeetingDetails_argsStandardScheme getScheme() {
        return new addMeetingDetails_argsStandardScheme();
      }
    }

    private static class addMeetingDetails_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addMeetingDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMeetingDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MEETING_DETAILS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.meetingDetails = new MeetingDetails();
                struct.meetingDetails.read(iprot);
                struct.setMeetingDetailsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMeetingDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.meetingDetails != null) {
          oprot.writeFieldBegin(MEETING_DETAILS_FIELD_DESC);
          struct.meetingDetails.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMeetingDetails_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addMeetingDetails_argsTupleScheme getScheme() {
        return new addMeetingDetails_argsTupleScheme();
      }
    }

    private static class addMeetingDetails_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addMeetingDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMeetingDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMeetingDetails()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMeetingDetails()) {
          struct.meetingDetails.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMeetingDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.meetingDetails = new MeetingDetails();
          struct.meetingDetails.read(iprot);
          struct.setMeetingDetailsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addMeetingDetails_result implements org.apache.thrift.TBase<addMeetingDetails_result, addMeetingDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<addMeetingDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addMeetingDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addMeetingDetails_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addMeetingDetails_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addMeetingDetails_result.class, metaDataMap);
    }

    public addMeetingDetails_result() {
    }

    public addMeetingDetails_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addMeetingDetails_result(addMeetingDetails_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addMeetingDetails_result deepCopy() {
      return new addMeetingDetails_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addMeetingDetails_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof addMeetingDetails_result)
        return this.equals((addMeetingDetails_result)that);
      return false;
    }

    public boolean equals(addMeetingDetails_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(addMeetingDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addMeetingDetails_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addMeetingDetails_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addMeetingDetails_resultStandardScheme getScheme() {
        return new addMeetingDetails_resultStandardScheme();
      }
    }

    private static class addMeetingDetails_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addMeetingDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addMeetingDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addMeetingDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addMeetingDetails_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addMeetingDetails_resultTupleScheme getScheme() {
        return new addMeetingDetails_resultTupleScheme();
      }
    }

    private static class addMeetingDetails_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addMeetingDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addMeetingDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addMeetingDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addEmployeeMeetingStatus_args implements org.apache.thrift.TBase<addEmployeeMeetingStatus_args, addEmployeeMeetingStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<addEmployeeMeetingStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addEmployeeMeetingStatus_args");

    private static final org.apache.thrift.protocol.TField EMPLOYEE_MEETING_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeMeetingStatus", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addEmployeeMeetingStatus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addEmployeeMeetingStatus_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<EmployeeStatusDataRequest> employeeMeetingStatus; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMPLOYEE_MEETING_STATUS((short)1, "employeeMeetingStatus");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMPLOYEE_MEETING_STATUS
            return EMPLOYEE_MEETING_STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMPLOYEE_MEETING_STATUS, new org.apache.thrift.meta_data.FieldMetaData("employeeMeetingStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmployeeStatusDataRequest.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addEmployeeMeetingStatus_args.class, metaDataMap);
    }

    public addEmployeeMeetingStatus_args() {
    }

    public addEmployeeMeetingStatus_args(
      java.util.List<EmployeeStatusDataRequest> employeeMeetingStatus)
    {
      this();
      this.employeeMeetingStatus = employeeMeetingStatus;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addEmployeeMeetingStatus_args(addEmployeeMeetingStatus_args other) {
      if (other.isSetEmployeeMeetingStatus()) {
        java.util.List<EmployeeStatusDataRequest> __this__employeeMeetingStatus = new java.util.ArrayList<EmployeeStatusDataRequest>(other.employeeMeetingStatus.size());
        for (EmployeeStatusDataRequest other_element : other.employeeMeetingStatus) {
          __this__employeeMeetingStatus.add(new EmployeeStatusDataRequest(other_element));
        }
        this.employeeMeetingStatus = __this__employeeMeetingStatus;
      }
    }

    public addEmployeeMeetingStatus_args deepCopy() {
      return new addEmployeeMeetingStatus_args(this);
    }

    @Override
    public void clear() {
      this.employeeMeetingStatus = null;
    }

    public int getEmployeeMeetingStatusSize() {
      return (this.employeeMeetingStatus == null) ? 0 : this.employeeMeetingStatus.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<EmployeeStatusDataRequest> getEmployeeMeetingStatusIterator() {
      return (this.employeeMeetingStatus == null) ? null : this.employeeMeetingStatus.iterator();
    }

    public void addToEmployeeMeetingStatus(EmployeeStatusDataRequest elem) {
      if (this.employeeMeetingStatus == null) {
        this.employeeMeetingStatus = new java.util.ArrayList<EmployeeStatusDataRequest>();
      }
      this.employeeMeetingStatus.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<EmployeeStatusDataRequest> getEmployeeMeetingStatus() {
      return this.employeeMeetingStatus;
    }

    public addEmployeeMeetingStatus_args setEmployeeMeetingStatus(@org.apache.thrift.annotation.Nullable java.util.List<EmployeeStatusDataRequest> employeeMeetingStatus) {
      this.employeeMeetingStatus = employeeMeetingStatus;
      return this;
    }

    public void unsetEmployeeMeetingStatus() {
      this.employeeMeetingStatus = null;
    }

    /** Returns true if field employeeMeetingStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetEmployeeMeetingStatus() {
      return this.employeeMeetingStatus != null;
    }

    public void setEmployeeMeetingStatusIsSet(boolean value) {
      if (!value) {
        this.employeeMeetingStatus = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case EMPLOYEE_MEETING_STATUS:
        if (value == null) {
          unsetEmployeeMeetingStatus();
        } else {
          setEmployeeMeetingStatus((java.util.List<EmployeeStatusDataRequest>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case EMPLOYEE_MEETING_STATUS:
        return getEmployeeMeetingStatus();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case EMPLOYEE_MEETING_STATUS:
        return isSetEmployeeMeetingStatus();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof addEmployeeMeetingStatus_args)
        return this.equals((addEmployeeMeetingStatus_args)that);
      return false;
    }

    public boolean equals(addEmployeeMeetingStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_employeeMeetingStatus = true && this.isSetEmployeeMeetingStatus();
      boolean that_present_employeeMeetingStatus = true && that.isSetEmployeeMeetingStatus();
      if (this_present_employeeMeetingStatus || that_present_employeeMeetingStatus) {
        if (!(this_present_employeeMeetingStatus && that_present_employeeMeetingStatus))
          return false;
        if (!this.employeeMeetingStatus.equals(that.employeeMeetingStatus))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEmployeeMeetingStatus()) ? 131071 : 524287);
      if (isSetEmployeeMeetingStatus())
        hashCode = hashCode * 8191 + employeeMeetingStatus.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addEmployeeMeetingStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetEmployeeMeetingStatus(), other.isSetEmployeeMeetingStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmployeeMeetingStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeMeetingStatus, other.employeeMeetingStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addEmployeeMeetingStatus_args(");
      boolean first = true;

      sb.append("employeeMeetingStatus:");
      if (this.employeeMeetingStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.employeeMeetingStatus);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addEmployeeMeetingStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addEmployeeMeetingStatus_argsStandardScheme getScheme() {
        return new addEmployeeMeetingStatus_argsStandardScheme();
      }
    }

    private static class addEmployeeMeetingStatus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addEmployeeMeetingStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addEmployeeMeetingStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMPLOYEE_MEETING_STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.employeeMeetingStatus = new java.util.ArrayList<EmployeeStatusDataRequest>(_list16.size);
                  @org.apache.thrift.annotation.Nullable EmployeeStatusDataRequest _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new EmployeeStatusDataRequest();
                    _elem17.read(iprot);
                    struct.employeeMeetingStatus.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setEmployeeMeetingStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addEmployeeMeetingStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.employeeMeetingStatus != null) {
          oprot.writeFieldBegin(EMPLOYEE_MEETING_STATUS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.employeeMeetingStatus.size()));
            for (EmployeeStatusDataRequest _iter19 : struct.employeeMeetingStatus)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addEmployeeMeetingStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addEmployeeMeetingStatus_argsTupleScheme getScheme() {
        return new addEmployeeMeetingStatus_argsTupleScheme();
      }
    }

    private static class addEmployeeMeetingStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addEmployeeMeetingStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addEmployeeMeetingStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEmployeeMeetingStatus()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmployeeMeetingStatus()) {
          {
            oprot.writeI32(struct.employeeMeetingStatus.size());
            for (EmployeeStatusDataRequest _iter20 : struct.employeeMeetingStatus)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addEmployeeMeetingStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
            struct.employeeMeetingStatus = new java.util.ArrayList<EmployeeStatusDataRequest>(_list21.size);
            @org.apache.thrift.annotation.Nullable EmployeeStatusDataRequest _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new EmployeeStatusDataRequest();
              _elem22.read(iprot);
              struct.employeeMeetingStatus.add(_elem22);
            }
          }
          struct.setEmployeeMeetingStatusIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addEmployeeMeetingStatus_result implements org.apache.thrift.TBase<addEmployeeMeetingStatus_result, addEmployeeMeetingStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<addEmployeeMeetingStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addEmployeeMeetingStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addEmployeeMeetingStatus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addEmployeeMeetingStatus_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addEmployeeMeetingStatus_result.class, metaDataMap);
    }

    public addEmployeeMeetingStatus_result() {
    }

    public addEmployeeMeetingStatus_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addEmployeeMeetingStatus_result(addEmployeeMeetingStatus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addEmployeeMeetingStatus_result deepCopy() {
      return new addEmployeeMeetingStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addEmployeeMeetingStatus_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof addEmployeeMeetingStatus_result)
        return this.equals((addEmployeeMeetingStatus_result)that);
      return false;
    }

    public boolean equals(addEmployeeMeetingStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(addEmployeeMeetingStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addEmployeeMeetingStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addEmployeeMeetingStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addEmployeeMeetingStatus_resultStandardScheme getScheme() {
        return new addEmployeeMeetingStatus_resultStandardScheme();
      }
    }

    private static class addEmployeeMeetingStatus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addEmployeeMeetingStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addEmployeeMeetingStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addEmployeeMeetingStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addEmployeeMeetingStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addEmployeeMeetingStatus_resultTupleScheme getScheme() {
        return new addEmployeeMeetingStatus_resultTupleScheme();
      }
    }

    private static class addEmployeeMeetingStatus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addEmployeeMeetingStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addEmployeeMeetingStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addEmployeeMeetingStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
