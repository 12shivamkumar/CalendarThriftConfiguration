/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.example.CalendarThriftConfiguration;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-07-25")
public class Time implements org.apache.thrift.TBase<Time, Time._Fields>, java.io.Serializable, Cloneable, Comparable<Time> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Time");

  private static final org.apache.thrift.protocol.TField HOURS_FIELD_DESC = new org.apache.thrift.protocol.TField("hours", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MINS_FIELD_DESC = new org.apache.thrift.protocol.TField("mins", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SECONDS_FIELD_DESC = new org.apache.thrift.protocol.TField("seconds", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TimeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TimeTupleSchemeFactory();

  public int hours; // required
  public int mins; // required
  public int seconds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOURS((short)1, "hours"),
    MINS((short)2, "mins"),
    SECONDS((short)3, "seconds");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOURS
          return HOURS;
        case 2: // MINS
          return MINS;
        case 3: // SECONDS
          return SECONDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HOURS_ISSET_ID = 0;
  private static final int __MINS_ISSET_ID = 1;
  private static final int __SECONDS_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOURS, new org.apache.thrift.meta_data.FieldMetaData("hours", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MINS, new org.apache.thrift.meta_data.FieldMetaData("mins", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SECONDS, new org.apache.thrift.meta_data.FieldMetaData("seconds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Time.class, metaDataMap);
  }

  public Time() {
  }

  public Time(
    int hours,
    int mins,
    int seconds)
  {
    this();
    this.hours = hours;
    setHoursIsSet(true);
    this.mins = mins;
    setMinsIsSet(true);
    this.seconds = seconds;
    setSecondsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Time(Time other) {
    __isset_bitfield = other.__isset_bitfield;
    this.hours = other.hours;
    this.mins = other.mins;
    this.seconds = other.seconds;
  }

  public Time deepCopy() {
    return new Time(this);
  }

  @Override
  public void clear() {
    setHoursIsSet(false);
    this.hours = 0;
    setMinsIsSet(false);
    this.mins = 0;
    setSecondsIsSet(false);
    this.seconds = 0;
  }

  public int getHours() {
    return this.hours;
  }

  public Time setHours(int hours) {
    this.hours = hours;
    setHoursIsSet(true);
    return this;
  }

  public void unsetHours() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HOURS_ISSET_ID);
  }

  /** Returns true if field hours is set (has been assigned a value) and false otherwise */
  public boolean isSetHours() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HOURS_ISSET_ID);
  }

  public void setHoursIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HOURS_ISSET_ID, value);
  }

  public int getMins() {
    return this.mins;
  }

  public Time setMins(int mins) {
    this.mins = mins;
    setMinsIsSet(true);
    return this;
  }

  public void unsetMins() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINS_ISSET_ID);
  }

  /** Returns true if field mins is set (has been assigned a value) and false otherwise */
  public boolean isSetMins() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINS_ISSET_ID);
  }

  public void setMinsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINS_ISSET_ID, value);
  }

  public int getSeconds() {
    return this.seconds;
  }

  public Time setSeconds(int seconds) {
    this.seconds = seconds;
    setSecondsIsSet(true);
    return this;
  }

  public void unsetSeconds() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SECONDS_ISSET_ID);
  }

  /** Returns true if field seconds is set (has been assigned a value) and false otherwise */
  public boolean isSetSeconds() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SECONDS_ISSET_ID);
  }

  public void setSecondsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SECONDS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case HOURS:
      if (value == null) {
        unsetHours();
      } else {
        setHours((java.lang.Integer)value);
      }
      break;

    case MINS:
      if (value == null) {
        unsetMins();
      } else {
        setMins((java.lang.Integer)value);
      }
      break;

    case SECONDS:
      if (value == null) {
        unsetSeconds();
      } else {
        setSeconds((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case HOURS:
      return getHours();

    case MINS:
      return getMins();

    case SECONDS:
      return getSeconds();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case HOURS:
      return isSetHours();
    case MINS:
      return isSetMins();
    case SECONDS:
      return isSetSeconds();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Time)
      return this.equals((Time)that);
    return false;
  }

  public boolean equals(Time that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hours = true;
    boolean that_present_hours = true;
    if (this_present_hours || that_present_hours) {
      if (!(this_present_hours && that_present_hours))
        return false;
      if (this.hours != that.hours)
        return false;
    }

    boolean this_present_mins = true;
    boolean that_present_mins = true;
    if (this_present_mins || that_present_mins) {
      if (!(this_present_mins && that_present_mins))
        return false;
      if (this.mins != that.mins)
        return false;
    }

    boolean this_present_seconds = true;
    boolean that_present_seconds = true;
    if (this_present_seconds || that_present_seconds) {
      if (!(this_present_seconds && that_present_seconds))
        return false;
      if (this.seconds != that.seconds)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + hours;

    hashCode = hashCode * 8191 + mins;

    hashCode = hashCode * 8191 + seconds;

    return hashCode;
  }

  @Override
  public int compareTo(Time other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetHours(), other.isSetHours());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHours()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hours, other.hours);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMins(), other.isSetMins());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMins()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mins, other.mins);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSeconds(), other.isSetSeconds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeconds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seconds, other.seconds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Time(");
    boolean first = true;

    sb.append("hours:");
    sb.append(this.hours);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mins:");
    sb.append(this.mins);
    first = false;
    if (!first) sb.append(", ");
    sb.append("seconds:");
    sb.append(this.seconds);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TimeStandardScheme getScheme() {
      return new TimeStandardScheme();
    }
  }

  private static class TimeStandardScheme extends org.apache.thrift.scheme.StandardScheme<Time> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Time struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOURS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hours = iprot.readI32();
              struct.setHoursIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MINS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mins = iprot.readI32();
              struct.setMinsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SECONDS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.seconds = iprot.readI32();
              struct.setSecondsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Time struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(HOURS_FIELD_DESC);
      oprot.writeI32(struct.hours);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MINS_FIELD_DESC);
      oprot.writeI32(struct.mins);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SECONDS_FIELD_DESC);
      oprot.writeI32(struct.seconds);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TimeTupleScheme getScheme() {
      return new TimeTupleScheme();
    }
  }

  private static class TimeTupleScheme extends org.apache.thrift.scheme.TupleScheme<Time> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Time struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHours()) {
        optionals.set(0);
      }
      if (struct.isSetMins()) {
        optionals.set(1);
      }
      if (struct.isSetSeconds()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetHours()) {
        oprot.writeI32(struct.hours);
      }
      if (struct.isSetMins()) {
        oprot.writeI32(struct.mins);
      }
      if (struct.isSetSeconds()) {
        oprot.writeI32(struct.seconds);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Time struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.hours = iprot.readI32();
        struct.setHoursIsSet(true);
      }
      if (incoming.get(1)) {
        struct.mins = iprot.readI32();
        struct.setMinsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.seconds = iprot.readI32();
        struct.setSecondsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

