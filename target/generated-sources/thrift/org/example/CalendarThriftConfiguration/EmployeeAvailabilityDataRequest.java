/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.example.CalendarThriftConfiguration;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-07-25")
public class EmployeeAvailabilityDataRequest implements org.apache.thrift.TBase<EmployeeAvailabilityDataRequest, EmployeeAvailabilityDataRequest._Fields>, java.io.Serializable, Cloneable, Comparable<EmployeeAvailabilityDataRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EmployeeAvailabilityDataRequest");

  private static final org.apache.thrift.protocol.TField LIST_OF_EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("listOfEmployeeId", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_OF_MEETING_FIELD_DESC = new org.apache.thrift.protocol.TField("dateOfMeeting", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EmployeeAvailabilityDataRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EmployeeAvailabilityDataRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> listOfEmployeeId; // required
  public @org.apache.thrift.annotation.Nullable Time startTime; // required
  public @org.apache.thrift.annotation.Nullable Time endTime; // required
  public @org.apache.thrift.annotation.Nullable Date dateOfMeeting; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LIST_OF_EMPLOYEE_ID((short)1, "listOfEmployeeId"),
    START_TIME((short)2, "startTime"),
    END_TIME((short)3, "endTime"),
    DATE_OF_MEETING((short)4, "dateOfMeeting");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LIST_OF_EMPLOYEE_ID
          return LIST_OF_EMPLOYEE_ID;
        case 2: // START_TIME
          return START_TIME;
        case 3: // END_TIME
          return END_TIME;
        case 4: // DATE_OF_MEETING
          return DATE_OF_MEETING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LIST_OF_EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("listOfEmployeeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Time.class)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Time.class)));
    tmpMap.put(_Fields.DATE_OF_MEETING, new org.apache.thrift.meta_data.FieldMetaData("dateOfMeeting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Date.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EmployeeAvailabilityDataRequest.class, metaDataMap);
  }

  public EmployeeAvailabilityDataRequest() {
  }

  public EmployeeAvailabilityDataRequest(
    java.util.List<java.lang.String> listOfEmployeeId,
    Time startTime,
    Time endTime,
    Date dateOfMeeting)
  {
    this();
    this.listOfEmployeeId = listOfEmployeeId;
    this.startTime = startTime;
    this.endTime = endTime;
    this.dateOfMeeting = dateOfMeeting;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EmployeeAvailabilityDataRequest(EmployeeAvailabilityDataRequest other) {
    if (other.isSetListOfEmployeeId()) {
      java.util.List<java.lang.String> __this__listOfEmployeeId = new java.util.ArrayList<java.lang.String>(other.listOfEmployeeId);
      this.listOfEmployeeId = __this__listOfEmployeeId;
    }
    if (other.isSetStartTime()) {
      this.startTime = new Time(other.startTime);
    }
    if (other.isSetEndTime()) {
      this.endTime = new Time(other.endTime);
    }
    if (other.isSetDateOfMeeting()) {
      this.dateOfMeeting = new Date(other.dateOfMeeting);
    }
  }

  public EmployeeAvailabilityDataRequest deepCopy() {
    return new EmployeeAvailabilityDataRequest(this);
  }

  @Override
  public void clear() {
    this.listOfEmployeeId = null;
    this.startTime = null;
    this.endTime = null;
    this.dateOfMeeting = null;
  }

  public int getListOfEmployeeIdSize() {
    return (this.listOfEmployeeId == null) ? 0 : this.listOfEmployeeId.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getListOfEmployeeIdIterator() {
    return (this.listOfEmployeeId == null) ? null : this.listOfEmployeeId.iterator();
  }

  public void addToListOfEmployeeId(java.lang.String elem) {
    if (this.listOfEmployeeId == null) {
      this.listOfEmployeeId = new java.util.ArrayList<java.lang.String>();
    }
    this.listOfEmployeeId.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getListOfEmployeeId() {
    return this.listOfEmployeeId;
  }

  public EmployeeAvailabilityDataRequest setListOfEmployeeId(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> listOfEmployeeId) {
    this.listOfEmployeeId = listOfEmployeeId;
    return this;
  }

  public void unsetListOfEmployeeId() {
    this.listOfEmployeeId = null;
  }

  /** Returns true if field listOfEmployeeId is set (has been assigned a value) and false otherwise */
  public boolean isSetListOfEmployeeId() {
    return this.listOfEmployeeId != null;
  }

  public void setListOfEmployeeIdIsSet(boolean value) {
    if (!value) {
      this.listOfEmployeeId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Time getStartTime() {
    return this.startTime;
  }

  public EmployeeAvailabilityDataRequest setStartTime(@org.apache.thrift.annotation.Nullable Time startTime) {
    this.startTime = startTime;
    return this;
  }

  public void unsetStartTime() {
    this.startTime = null;
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return this.startTime != null;
  }

  public void setStartTimeIsSet(boolean value) {
    if (!value) {
      this.startTime = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Time getEndTime() {
    return this.endTime;
  }

  public EmployeeAvailabilityDataRequest setEndTime(@org.apache.thrift.annotation.Nullable Time endTime) {
    this.endTime = endTime;
    return this;
  }

  public void unsetEndTime() {
    this.endTime = null;
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return this.endTime != null;
  }

  public void setEndTimeIsSet(boolean value) {
    if (!value) {
      this.endTime = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Date getDateOfMeeting() {
    return this.dateOfMeeting;
  }

  public EmployeeAvailabilityDataRequest setDateOfMeeting(@org.apache.thrift.annotation.Nullable Date dateOfMeeting) {
    this.dateOfMeeting = dateOfMeeting;
    return this;
  }

  public void unsetDateOfMeeting() {
    this.dateOfMeeting = null;
  }

  /** Returns true if field dateOfMeeting is set (has been assigned a value) and false otherwise */
  public boolean isSetDateOfMeeting() {
    return this.dateOfMeeting != null;
  }

  public void setDateOfMeetingIsSet(boolean value) {
    if (!value) {
      this.dateOfMeeting = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LIST_OF_EMPLOYEE_ID:
      if (value == null) {
        unsetListOfEmployeeId();
      } else {
        setListOfEmployeeId((java.util.List<java.lang.String>)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Time)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Time)value);
      }
      break;

    case DATE_OF_MEETING:
      if (value == null) {
        unsetDateOfMeeting();
      } else {
        setDateOfMeeting((Date)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LIST_OF_EMPLOYEE_ID:
      return getListOfEmployeeId();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case DATE_OF_MEETING:
      return getDateOfMeeting();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LIST_OF_EMPLOYEE_ID:
      return isSetListOfEmployeeId();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case DATE_OF_MEETING:
      return isSetDateOfMeeting();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof EmployeeAvailabilityDataRequest)
      return this.equals((EmployeeAvailabilityDataRequest)that);
    return false;
  }

  public boolean equals(EmployeeAvailabilityDataRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_listOfEmployeeId = true && this.isSetListOfEmployeeId();
    boolean that_present_listOfEmployeeId = true && that.isSetListOfEmployeeId();
    if (this_present_listOfEmployeeId || that_present_listOfEmployeeId) {
      if (!(this_present_listOfEmployeeId && that_present_listOfEmployeeId))
        return false;
      if (!this.listOfEmployeeId.equals(that.listOfEmployeeId))
        return false;
    }

    boolean this_present_startTime = true && this.isSetStartTime();
    boolean that_present_startTime = true && that.isSetStartTime();
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (!this.startTime.equals(that.startTime))
        return false;
    }

    boolean this_present_endTime = true && this.isSetEndTime();
    boolean that_present_endTime = true && that.isSetEndTime();
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (!this.endTime.equals(that.endTime))
        return false;
    }

    boolean this_present_dateOfMeeting = true && this.isSetDateOfMeeting();
    boolean that_present_dateOfMeeting = true && that.isSetDateOfMeeting();
    if (this_present_dateOfMeeting || that_present_dateOfMeeting) {
      if (!(this_present_dateOfMeeting && that_present_dateOfMeeting))
        return false;
      if (!this.dateOfMeeting.equals(that.dateOfMeeting))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetListOfEmployeeId()) ? 131071 : 524287);
    if (isSetListOfEmployeeId())
      hashCode = hashCode * 8191 + listOfEmployeeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetStartTime()) ? 131071 : 524287);
    if (isSetStartTime())
      hashCode = hashCode * 8191 + startTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetEndTime()) ? 131071 : 524287);
    if (isSetEndTime())
      hashCode = hashCode * 8191 + endTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetDateOfMeeting()) ? 131071 : 524287);
    if (isSetDateOfMeeting())
      hashCode = hashCode * 8191 + dateOfMeeting.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(EmployeeAvailabilityDataRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetListOfEmployeeId(), other.isSetListOfEmployeeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListOfEmployeeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listOfEmployeeId, other.listOfEmployeeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStartTime(), other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEndTime(), other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDateOfMeeting(), other.isSetDateOfMeeting());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateOfMeeting()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateOfMeeting, other.dateOfMeeting);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("EmployeeAvailabilityDataRequest(");
    boolean first = true;

    sb.append("listOfEmployeeId:");
    if (this.listOfEmployeeId == null) {
      sb.append("null");
    } else {
      sb.append(this.listOfEmployeeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    if (this.startTime == null) {
      sb.append("null");
    } else {
      sb.append(this.startTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    if (this.endTime == null) {
      sb.append("null");
    } else {
      sb.append(this.endTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateOfMeeting:");
    if (this.dateOfMeeting == null) {
      sb.append("null");
    } else {
      sb.append(this.dateOfMeeting);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (startTime != null) {
      startTime.validate();
    }
    if (endTime != null) {
      endTime.validate();
    }
    if (dateOfMeeting != null) {
      dateOfMeeting.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EmployeeAvailabilityDataRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EmployeeAvailabilityDataRequestStandardScheme getScheme() {
      return new EmployeeAvailabilityDataRequestStandardScheme();
    }
  }

  private static class EmployeeAvailabilityDataRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<EmployeeAvailabilityDataRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EmployeeAvailabilityDataRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LIST_OF_EMPLOYEE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.listOfEmployeeId = new java.util.ArrayList<java.lang.String>(_list0.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.listOfEmployeeId.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setListOfEmployeeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.startTime = new Time();
              struct.startTime.read(iprot);
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.endTime = new Time();
              struct.endTime.read(iprot);
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE_OF_MEETING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dateOfMeeting = new Date();
              struct.dateOfMeeting.read(iprot);
              struct.setDateOfMeetingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EmployeeAvailabilityDataRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.listOfEmployeeId != null) {
        oprot.writeFieldBegin(LIST_OF_EMPLOYEE_ID_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listOfEmployeeId.size()));
          for (java.lang.String _iter3 : struct.listOfEmployeeId)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.startTime != null) {
        oprot.writeFieldBegin(START_TIME_FIELD_DESC);
        struct.startTime.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.endTime != null) {
        oprot.writeFieldBegin(END_TIME_FIELD_DESC);
        struct.endTime.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.dateOfMeeting != null) {
        oprot.writeFieldBegin(DATE_OF_MEETING_FIELD_DESC);
        struct.dateOfMeeting.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EmployeeAvailabilityDataRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EmployeeAvailabilityDataRequestTupleScheme getScheme() {
      return new EmployeeAvailabilityDataRequestTupleScheme();
    }
  }

  private static class EmployeeAvailabilityDataRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<EmployeeAvailabilityDataRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EmployeeAvailabilityDataRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetListOfEmployeeId()) {
        optionals.set(0);
      }
      if (struct.isSetStartTime()) {
        optionals.set(1);
      }
      if (struct.isSetEndTime()) {
        optionals.set(2);
      }
      if (struct.isSetDateOfMeeting()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetListOfEmployeeId()) {
        {
          oprot.writeI32(struct.listOfEmployeeId.size());
          for (java.lang.String _iter4 : struct.listOfEmployeeId)
          {
            oprot.writeString(_iter4);
          }
        }
      }
      if (struct.isSetStartTime()) {
        struct.startTime.write(oprot);
      }
      if (struct.isSetEndTime()) {
        struct.endTime.write(oprot);
      }
      if (struct.isSetDateOfMeeting()) {
        struct.dateOfMeeting.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EmployeeAvailabilityDataRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list5 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.listOfEmployeeId = new java.util.ArrayList<java.lang.String>(_list5.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.listOfEmployeeId.add(_elem6);
          }
        }
        struct.setListOfEmployeeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.startTime = new Time();
        struct.startTime.read(iprot);
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.endTime = new Time();
        struct.endTime.read(iprot);
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dateOfMeeting = new Date();
        struct.dateOfMeeting.read(iprot);
        struct.setDateOfMeetingIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

