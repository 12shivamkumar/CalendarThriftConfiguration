/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.example.CalendarThriftConfiguration;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-07-25")
public class EmployeeStatusDataRequest implements org.apache.thrift.TBase<EmployeeStatusDataRequest, EmployeeStatusDataRequest._Fields>, java.io.Serializable, Cloneable, Comparable<EmployeeStatusDataRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EmployeeStatusDataRequest");

  private static final org.apache.thrift.protocol.TField EMPLOYEE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("employeeId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MEETING_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("meetingId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_OF_MEETING_FIELD_DESC = new org.apache.thrift.protocol.TField("dateOfMeeting", org.apache.thrift.protocol.TType.STRUCT, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new EmployeeStatusDataRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new EmployeeStatusDataRequestTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String employeeId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String meetingId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String status; // required
  public @org.apache.thrift.annotation.Nullable Date dateOfMeeting; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EMPLOYEE_ID((short)1, "employeeId"),
    MEETING_ID((short)2, "meetingId"),
    STATUS((short)3, "status"),
    DATE_OF_MEETING((short)4, "dateOfMeeting");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EMPLOYEE_ID
          return EMPLOYEE_ID;
        case 2: // MEETING_ID
          return MEETING_ID;
        case 3: // STATUS
          return STATUS;
        case 4: // DATE_OF_MEETING
          return DATE_OF_MEETING;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EMPLOYEE_ID, new org.apache.thrift.meta_data.FieldMetaData("employeeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEETING_ID, new org.apache.thrift.meta_data.FieldMetaData("meetingId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE_OF_MEETING, new org.apache.thrift.meta_data.FieldMetaData("dateOfMeeting", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Date.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EmployeeStatusDataRequest.class, metaDataMap);
  }

  public EmployeeStatusDataRequest() {
  }

  public EmployeeStatusDataRequest(
    java.lang.String employeeId,
    java.lang.String meetingId,
    java.lang.String status,
    Date dateOfMeeting)
  {
    this();
    this.employeeId = employeeId;
    this.meetingId = meetingId;
    this.status = status;
    this.dateOfMeeting = dateOfMeeting;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EmployeeStatusDataRequest(EmployeeStatusDataRequest other) {
    if (other.isSetEmployeeId()) {
      this.employeeId = other.employeeId;
    }
    if (other.isSetMeetingId()) {
      this.meetingId = other.meetingId;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetDateOfMeeting()) {
      this.dateOfMeeting = new Date(other.dateOfMeeting);
    }
  }

  public EmployeeStatusDataRequest deepCopy() {
    return new EmployeeStatusDataRequest(this);
  }

  @Override
  public void clear() {
    this.employeeId = null;
    this.meetingId = null;
    this.status = null;
    this.dateOfMeeting = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getEmployeeId() {
    return this.employeeId;
  }

  public EmployeeStatusDataRequest setEmployeeId(@org.apache.thrift.annotation.Nullable java.lang.String employeeId) {
    this.employeeId = employeeId;
    return this;
  }

  public void unsetEmployeeId() {
    this.employeeId = null;
  }

  /** Returns true if field employeeId is set (has been assigned a value) and false otherwise */
  public boolean isSetEmployeeId() {
    return this.employeeId != null;
  }

  public void setEmployeeIdIsSet(boolean value) {
    if (!value) {
      this.employeeId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMeetingId() {
    return this.meetingId;
  }

  public EmployeeStatusDataRequest setMeetingId(@org.apache.thrift.annotation.Nullable java.lang.String meetingId) {
    this.meetingId = meetingId;
    return this;
  }

  public void unsetMeetingId() {
    this.meetingId = null;
  }

  /** Returns true if field meetingId is set (has been assigned a value) and false otherwise */
  public boolean isSetMeetingId() {
    return this.meetingId != null;
  }

  public void setMeetingIdIsSet(boolean value) {
    if (!value) {
      this.meetingId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getStatus() {
    return this.status;
  }

  public EmployeeStatusDataRequest setStatus(@org.apache.thrift.annotation.Nullable java.lang.String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public Date getDateOfMeeting() {
    return this.dateOfMeeting;
  }

  public EmployeeStatusDataRequest setDateOfMeeting(@org.apache.thrift.annotation.Nullable Date dateOfMeeting) {
    this.dateOfMeeting = dateOfMeeting;
    return this;
  }

  public void unsetDateOfMeeting() {
    this.dateOfMeeting = null;
  }

  /** Returns true if field dateOfMeeting is set (has been assigned a value) and false otherwise */
  public boolean isSetDateOfMeeting() {
    return this.dateOfMeeting != null;
  }

  public void setDateOfMeetingIsSet(boolean value) {
    if (!value) {
      this.dateOfMeeting = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case EMPLOYEE_ID:
      if (value == null) {
        unsetEmployeeId();
      } else {
        setEmployeeId((java.lang.String)value);
      }
      break;

    case MEETING_ID:
      if (value == null) {
        unsetMeetingId();
      } else {
        setMeetingId((java.lang.String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.String)value);
      }
      break;

    case DATE_OF_MEETING:
      if (value == null) {
        unsetDateOfMeeting();
      } else {
        setDateOfMeeting((Date)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case EMPLOYEE_ID:
      return getEmployeeId();

    case MEETING_ID:
      return getMeetingId();

    case STATUS:
      return getStatus();

    case DATE_OF_MEETING:
      return getDateOfMeeting();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case EMPLOYEE_ID:
      return isSetEmployeeId();
    case MEETING_ID:
      return isSetMeetingId();
    case STATUS:
      return isSetStatus();
    case DATE_OF_MEETING:
      return isSetDateOfMeeting();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof EmployeeStatusDataRequest)
      return this.equals((EmployeeStatusDataRequest)that);
    return false;
  }

  public boolean equals(EmployeeStatusDataRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_employeeId = true && this.isSetEmployeeId();
    boolean that_present_employeeId = true && that.isSetEmployeeId();
    if (this_present_employeeId || that_present_employeeId) {
      if (!(this_present_employeeId && that_present_employeeId))
        return false;
      if (!this.employeeId.equals(that.employeeId))
        return false;
    }

    boolean this_present_meetingId = true && this.isSetMeetingId();
    boolean that_present_meetingId = true && that.isSetMeetingId();
    if (this_present_meetingId || that_present_meetingId) {
      if (!(this_present_meetingId && that_present_meetingId))
        return false;
      if (!this.meetingId.equals(that.meetingId))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_dateOfMeeting = true && this.isSetDateOfMeeting();
    boolean that_present_dateOfMeeting = true && that.isSetDateOfMeeting();
    if (this_present_dateOfMeeting || that_present_dateOfMeeting) {
      if (!(this_present_dateOfMeeting && that_present_dateOfMeeting))
        return false;
      if (!this.dateOfMeeting.equals(that.dateOfMeeting))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetEmployeeId()) ? 131071 : 524287);
    if (isSetEmployeeId())
      hashCode = hashCode * 8191 + employeeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetMeetingId()) ? 131071 : 524287);
    if (isSetMeetingId())
      hashCode = hashCode * 8191 + meetingId.hashCode();

    hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
    if (isSetStatus())
      hashCode = hashCode * 8191 + status.hashCode();

    hashCode = hashCode * 8191 + ((isSetDateOfMeeting()) ? 131071 : 524287);
    if (isSetDateOfMeeting())
      hashCode = hashCode * 8191 + dateOfMeeting.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(EmployeeStatusDataRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetEmployeeId(), other.isSetEmployeeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmployeeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.employeeId, other.employeeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMeetingId(), other.isSetMeetingId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeetingId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.meetingId, other.meetingId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDateOfMeeting(), other.isSetDateOfMeeting());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateOfMeeting()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateOfMeeting, other.dateOfMeeting);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("EmployeeStatusDataRequest(");
    boolean first = true;

    sb.append("employeeId:");
    if (this.employeeId == null) {
      sb.append("null");
    } else {
      sb.append(this.employeeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("meetingId:");
    if (this.meetingId == null) {
      sb.append("null");
    } else {
      sb.append(this.meetingId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dateOfMeeting:");
    if (this.dateOfMeeting == null) {
      sb.append("null");
    } else {
      sb.append(this.dateOfMeeting);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (dateOfMeeting != null) {
      dateOfMeeting.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EmployeeStatusDataRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EmployeeStatusDataRequestStandardScheme getScheme() {
      return new EmployeeStatusDataRequestStandardScheme();
    }
  }

  private static class EmployeeStatusDataRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<EmployeeStatusDataRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EmployeeStatusDataRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EMPLOYEE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.employeeId = iprot.readString();
              struct.setEmployeeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEETING_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.meetingId = iprot.readString();
              struct.setMeetingIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE_OF_MEETING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dateOfMeeting = new Date();
              struct.dateOfMeeting.read(iprot);
              struct.setDateOfMeetingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EmployeeStatusDataRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.employeeId != null) {
        oprot.writeFieldBegin(EMPLOYEE_ID_FIELD_DESC);
        oprot.writeString(struct.employeeId);
        oprot.writeFieldEnd();
      }
      if (struct.meetingId != null) {
        oprot.writeFieldBegin(MEETING_ID_FIELD_DESC);
        oprot.writeString(struct.meetingId);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.dateOfMeeting != null) {
        oprot.writeFieldBegin(DATE_OF_MEETING_FIELD_DESC);
        struct.dateOfMeeting.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EmployeeStatusDataRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public EmployeeStatusDataRequestTupleScheme getScheme() {
      return new EmployeeStatusDataRequestTupleScheme();
    }
  }

  private static class EmployeeStatusDataRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<EmployeeStatusDataRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EmployeeStatusDataRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEmployeeId()) {
        optionals.set(0);
      }
      if (struct.isSetMeetingId()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetDateOfMeeting()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetEmployeeId()) {
        oprot.writeString(struct.employeeId);
      }
      if (struct.isSetMeetingId()) {
        oprot.writeString(struct.meetingId);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetDateOfMeeting()) {
        struct.dateOfMeeting.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EmployeeStatusDataRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.employeeId = iprot.readString();
        struct.setEmployeeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.meetingId = iprot.readString();
        struct.setMeetingIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dateOfMeeting = new Date();
        struct.dateOfMeeting.read(iprot);
        struct.setDateOfMeetingIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

